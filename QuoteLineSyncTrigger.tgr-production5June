trigger QuoteLineSyncTrigger on QuoteLineItem (before insert, after insert, after update, after delete) {
 
    TriggerEnabled__c myCS = TriggerEnabled__c.getValues('QuoteLineSyncTrigger');
    System.debug('myCS------------------>'+myCS);
    if(myCS == null || (myCS.Object_Name__c=='QuoteLineItem' && myCS.Active__c==True))
    {
    // Not to run when record gets deleted.
    if( ! Trigger.isDelete)
    {
        if (trigger.isBefore && trigger.isInsert) { 
            if (QuoteSyncUtil.isRunningTest) {
                for (QuoteLineItem qli : trigger.new) {
                    QuoteSyncUtil.populateRequiredFields(qli);
                }
            }    
            return;
        } 
      
        if (TriggerStopper.stopQuoteLine) return;
            
        Set<String> quoteLineFields = QuoteSyncUtil.getQuoteLineFields();
        List<String> oppLineFields = QuoteSyncUtil.getOppLineFields();
        
        String qliFields = QuoteSyncUtil.getQuoteLineFieldsString();
        
        String oliFields = QuoteSyncUtil.getOppLineFieldsString();
                
        String qliIds = '';
        for (QuoteLineItem qli : trigger.new) {
            if (qliIds != '') qliIds += ', ';
            qliIds += '\'' + qli.Id + '\'';
        }
         
        String qliQuery = 'select Id, QuoteId, PricebookEntryId, UnitPrice, Quantity, Discount, ServiceDate, SortOrder' + qliFields + ' from QuoteLineItem where Id in (' + qliIds + ') order by QuoteId, SortOrder ASC';
        //System.debug(qliQuery); 
            
        List<QuoteLineItem> qlis = Database.query(qliQuery);
        
        Map<Id, List<QuoteLineItem>> quoteToQliMap = new Map<Id, List<QuoteLineItem>>();
        
        for (QuoteLineItem qli : qlis) {    
            List<QuoteLineItem> qliList = quoteToQliMap.get(qli.QuoteId);
            if (qliList == null) {
                qliList = new List<QuoteLineItem>();
            } 
            qliList.add(qli);  
            quoteToQliMap.put(qli.QuoteId, qliList);        
        }

        Set<Id> quoteIds = quoteToQliMap.keySet();
        Map<Id, Quote> quotes = new Map<Id, Quote>([select id, OpportunityId, isSyncing from Quote where Id in :quoteIds]);
        
        String oppIds = '';
        Set<Id> filterQuoteIds = new Set<Id>();
        for (Quote quote : quotes.values()) {
            // Only sync quote line item that are inserted for a new Quote or on a isSyncing Quote
            if ((trigger.isInsert && QuoteSyncUtil.isNewQuote(quote.Id)) || quote.isSyncing) {
               if (oppIds != '') oppIds += ', ';
               oppIds += '\'' + quote.OpportunityId + '\'';         
            } else {
                filterQuoteIds.add(quote.Id);
            }
        }
        
        //System.debug('Filter quote ids: ' + filterQuoteIds);
        
        quoteIds.removeAll(filterQuoteIds);
        for (Id id : filterQuoteIds) {
           quotes.remove(id);
           quoteToQliMap.remove(id);
        }   
       
        if (oppIds != '') {   
            String oliQuery = 'select Id, OpportunityId, PricebookEntryId, UnitPrice, Quantity, Discount, ServiceDate, SortOrder' + oliFields + ' from OpportunityLineItem where OpportunityId in (' + oppIds + ') order by OpportunityId, SortOrder ASC';   
            //System.debug(qliQuery);    
            
            List<OpportunityLineItem> olis = Database.query(oliQuery);    
            
            Map<Id, List<OpportunityLineItem>> oppToOliMap = new Map<Id, List<OpportunityLineItem>>();
            
            for (OpportunityLineItem oli : olis) {
                List<OpportunityLineItem> oliList = oppToOliMap.get(oli.OpportunityId);
                if (oliList == null) {
                    oliList = new List<OpportunityLineItem>();
                } 
                oliList.add(oli);  
                oppToOliMap.put(oli.OpportunityId, oliList);       
            } 
         
            Set<OpportunityLineItem> updateOlis = new Set<OpportunityLineItem>();
            Set<QuoteLineItem> updateQlis = new Set<QuoteLineItem>();
                  
            for (Quote quote : quotes.values()) {
                    
                List<OpportunityLineItem> opplines = oppToOliMap.get(quote.OpportunityId);
                
                // for quote line insert, there will not be corresponding opp line
                if (opplines == null) continue;        

                Set<OpportunityLineItem> matchedOlis = new Set<OpportunityLineItem>();
            
                for (QuoteLineItem qli : quoteToQliMap.get(quote.Id)) {
                
                    boolean updateOli = false;
                    QuoteLineItem oldQli = null;
                    
                    if (trigger.isUpdate) {
                        oldQli = trigger.oldMap.get(qli.Id);
                        //System.debug('Old qli: ' + oldQli.UnitPrice + ', ' + oldQli.Quantity + ', ' + oldQli.Discount + ', ' + oldQli.ServiceDate);
                        //System.debug('New qli: ' + qli.UnitPrice + ', ' + qli.Quantity + ', ' + qli.Discount + ', ' + qli.ServiceDate);
                        
                        if (qli.UnitPrice == oldQli.UnitPrice
                            && qli.Quantity == oldQli.Quantity
                            && qli.Discount == oldQli.Discount
                            && qli.ServiceDate == oldQli.ServiceDate
                            && qli.SortOrder == oldQli.SortOrder 
                           )
                            updateOli = true;                       
                    }
                    
                                                                          
                    boolean hasChange = false;
                    boolean match = false;
                      
                    for (OpportunityLineItem oli : opplines) {          
                        if (oli.pricebookentryid == qli.pricebookentryId  
                            && oli.UnitPrice == qli.UnitPrice
                            && oli.Quantity == qli.Quantity
                            && oli.Discount == qli.Discount
                            && oli.ServiceDate == qli.ServiceDate
                            && oli.SortOrder == qli.SortOrder
                           ) {
                            
                            if (updateOlis.contains(oli) || matchedOlis.contains(oli)) continue;  
                            
                            matchedOlis.add(oli);                       
                                                   
                            for (String qliField : quoteLineFields) {
                                String oliField = QuoteSyncUtil.getQuoteLineFieldMapTo(qliField);
                                Object oliValue = oli.get(oliField);
                                Object qliValue = qli.get(qliField);
                                if (oliValue != qliValue) { 
                                                                                                    
                                    if (trigger.isInsert && (qliValue == null || (qliValue instanceof Boolean && !Boolean.valueOf(qliValue)))) {
                                    
                                        //System.debug('Insert trigger, isSyncing: ' + quote.isSyncing + ', new quote ids: ' + QuoteSyncUtil.getNewQuoteIds());
                                            
                                        // If it's a newly created Quote, don't sync the "Description" field value, 
                                        // because it's already copied from Opportunity Line Item on create. 
                                        if (quote.isSyncing || (QuoteSyncUtil.isNewQuote(quote.Id) && !qliField.equalsIgnoreCase('description'))) {                                     
                                            qli.put(qliField, oliValue);
                                            hasChange = true; 
                                        }    
                                       
                                    } else if (trigger.isUpdate && !updateOli /*&& oldQli != null*/) {
                                        //Object oldQliValue = oldQli.get(qliField);
                                        //if (qliValue == oldQliValue) {
                                            if (oliValue == null) qli.put(qliField, null);
                                            else qli.put(qliField, oliValue);
                                            hasChange = true;
                                        //}     
                                         
                                    } else if (trigger.isUpdate && updateOli) {
                                        if (qliValue == null) oli.put(oliField, null);
                                        else oli.put(oliField, qliValue);
                                        hasChange = true;  
                                    }
                                }    
                            }
                            
                            if (hasChange) {
                                if (trigger.isInsert || (trigger.isUpdate && !updateOli)) { 
                                    updateQlis.add(qli);
                                } else if (trigger.isUpdate && updateOli) {                               
                                    updateOlis.add(oli);
                                }                    
                            } 
                            
                            match = true;      
                            break;                          
                        } 
                    }
                    
                    // NOTE: this cause error when there is workflow field update that fired during record create
                    //if (trigger.isUpdate && updateOli) System.assert(match, 'No matching oppline');     
                }
            }
         
            TriggerStopper.stopOpp = true;
            TriggerStopper.stopQuote = true;             
            TriggerStopper.stopOppLine = true;
            TriggerStopper.stopQuoteLine = true;    
                        
            if (!updateOlis.isEmpty()) { 
                List<OpportunityLineItem> oliList = new List<OpportunityLineItem>();
                oliList.addAll(updateOlis);
                                
                Database.update(olilist);              
            }
            
            if (!updateQlis.isEmpty()) {
                List<QuoteLineItem> qliList = new List<QuoteLineItem>();   
                qliList.addAll(updateQlis);
                                  
                Database.update(qliList);            
            }
            
            if (Trigger.isInsert) {
               QuoteSyncUtil.removeAllNewQuoteIds(quoteIds);
            }                             
            
            TriggerStopper.stopOpp = false;
            TriggerStopper.stopQuote = false;                
            TriggerStopper.stopOppLine = false;          
            TriggerStopper.stopQuoteLine = false;           
        }  
    }
    //CR-006712:pouplate tariif fee on quote added by Akshay
    if(Trigger.isAfter && (Trigger.isInsert || Trigger.isUpdate || Trigger.isDelete) && clsRecusrsiveCheck.runQuoteLineItemOnce)
    {
        System.debug('Tariff Fee updated block of code ran!!!!');
        System.debug('Trigger.new------------->'+Trigger.new);
        System.debug('Trigger.old----------->'+Trigger.old);
        //Map to hold quote id and their respective tariff fee.
        Map<Id, Decimal> mapTariffFee =new Map<Id, Decimal>();
        String skuName = System.label.TariffFeeNotAppliedPP;
        Set<String> setSKUName = new Set<String>();
        if(String.isNotBlank(skuName))
        {
            List<String> lstSKUName = skuName.split(',');
            setSKUName = new Set<String>(lstSKUName);
        }
        Set<Id> lstQuoteID = new Set<Id>();
        List<QuoteLineItem> lstQuoteLineItem = new List<QuoteLineItem>();
        lstQuoteLineItem = Trigger.isDelete ? Trigger.old : Trigger.new;

        if(lstQuoteLineItem != null && lstQuoteLineItem.size() > 0)
        {
            for(QuoteLineItem eachQuote : lstQuoteLineItem)
            {
                lstQuoteID.add(eachQuote.QuoteId);
            }
        }
        System.debug('lstQuoteID--------->'+lstQuoteID);
        System.debug('setSKUName---------->'+setSKUName);
        Set<Id> setQuoteId = new Set<Id>();
        Map<Id,Integer> map_IsMojoProductAdded = new Map<Id, Integer>(); 
        if(lstQuoteID != null && lstQuoteID.size() > 0)
        {

            List<QuoteLineItem> lstAllQuoteLineItem = [Select Product_Name__c,Is_Mojo_Product__c, QuoteId,TotalPrice,Quote.Remove_Tariff__c, Quote.Opportunity.Account.Tariff_Fee__c  from QuoteLineItem where QuoteId IN :  lstQuoteID];
            System.debug('lstAllQuoteLineItem---------->'+lstAllQuoteLineItem);
            System.debug('lstAllQuoteLineItem----------------->'+lstAllQuoteLineItem.size());
            if(lstAllQuoteLineItem != null && lstAllQuoteLineItem.size() >0)
            {
                for(QuoteLineItem eachQLI : lstAllQuoteLineItem)
                {
                    System.debug('----- eachQLI.Quote.Remove_Tariff__c: ' + eachQLI.Quote.Remove_Tariff__c);
                    System.debug('----- skuName: ' + skuName);
                    System.debug('----- !skuName.contains(eachQLI.Product_Name__c): ' + (!skuName.contains(eachQLI.Product_Name__c)));
                    System.debug('----- skuName.contains(eachQLI.Product_Name__c.subStringBefore(-)): ' + skuName.contains(eachQLI.Product_Name__c.subStringBefore('-')));
                    System.debug('----- eachQLI.Product_Name__c.subStringBefore(-): ' + eachQLI.Product_Name__c.subStringBefore('-'));
                    System.debug('----- eachQLI.Product_Name__c: ' + eachQLI.Product_Name__c);
                    //skuName.contains(eachQLI.Product_Name__c.subStringBefore('-')) || !skuName.contains(eachQLI.Product_Name__c))

                    //if(! eachQLI.Quote.Remove_Tariff__c && setSKUName != null && setSKUName.size() > 0 && (!setSKUName.contains(eachQLI.Product_Name__c.subStringBefore('-')) || ! setSKUName.contains(eachQLI.Product_Name__c)))
                    if(! eachQLI.Quote.Remove_Tariff__c && skuName != null && ! setSKUName.contains(eachQLI.Product_Name__c.subStringBefore('-')) && ! setSKUName.contains(eachQLI.Product_Name__c))
                    {
                        Decimal tariffFee = eachQLI.Quote.Opportunity.Account.Tariff_Fee__c != null ? eachQLI.Quote.Opportunity.Account.Tariff_Fee__c/100 : 0.055;
                        System.debug('Total Price------>'+eachQLI.TotalPrice);
                        System.debug('tariffFee--------------->'+tariffFee);
                        System.debug('Total Price------>'+eachQLI.TotalPrice);
                        if(! mapTariffFee.containsKey(eachQLI.QuoteId))
                            mapTariffFee.put(eachQLI.QuoteId, eachQLI.TotalPrice *tariffFee);
                        else
                            mapTariffFee.put(eachQLI.QuoteId, mapTariffFee.get(eachQLI.QuoteId) + eachQLI.TotalPrice * tariffFee);
                    }
                    else
                    {
                        setQuoteId.add(eachQLI.QuoteId);
                    }
                    System.debug('eachQLI.Is_Mojo_Product__c-------->'+eachQLI.Is_Mojo_Product__c);
                    if(eachQLI.Is_Mojo_Product__c && (! map_IsMojoProductAdded.containsKey(eachQLI.Id) || map_IsMojoProductAdded.get(eachQLI.Id) == 0))    
                    {
                        System.debug('mojo product is added!!!!');    
                        map_IsMojoProductAdded.put(eachQLI.QuoteId, 1);
                    }
                    else if( ! map_IsMojoProductAdded.containsKey(eachQLI.Id))
                        map_IsMojoProductAdded.put(eachQLI.QuoteId, 0);
                }
            }

            //set Notes to null when there is no line item added.
            if(lstAllQuoteLineItem == null || lstAllQuoteLineItem.size() == 0)
            {
                List<Quote> lstQuoteToUpdate = [Select Notes_Mojo__c,Is_Mojo_Product_Added__c,Tariff_Fee__c,Tariff_Fee_Background__c from Quote where id IN : lstQuoteID and Is_Mojo_Product_Added__c = true];
                System.debug('lstQuoteToUpdate---------------->'+lstQuoteToUpdate);
                if(lstQuoteToUpdate != null && lstQuoteToUpdate.size() >0)
                {
                    List<Quote> lstUpdatedQuote = new List<Quote>();
                    for(Quote eachQuote : lstQuoteToUpdate)
                    {
                        Quote updateToQuote = new Quote(id =eachQuote.id, Notes_Mojo__c =null, Is_Mojo_Product_Added__c = false,Tariff_Fee__c = null, Tariff_Fee_Background__c = null ); lstUpdatedQuote.add(updateToQuote);
                    }
                    System.debug('lstUpdatedQuote------------>'+lstUpdatedQuote);
                    if(lstUpdatedQuote != null && lstUpdatedQuote.size() > 0)
                    {
                        System.debug('Update Quote when there is no line item record added!!!!');
                        // bypass Quote trigger.
                        clsRecusrsiveCheck.byPassQuoteSyncTrigger = false; update lstUpdatedQuote;
                        // to run quote line item trigger once, used static variable.
                        clsRecusrsiveCheck.runQuoteLineItemOnce = false;
                    }
                }
            }
        }
        System.debug('map_IsMojoProductAdded------------------>'+map_IsMojoProductAdded);
        System.debug('mapTariffFee------------->'+mapTariffFee);
        System.debug('setQuoteId-------------------->'+setQuoteId);
        if((mapTariffFee != null && mapTariffFee.size() > 0) || (setQuoteId != null && setQuoteId.size() > 0) || (map_IsMojoProductAdded != null && map_IsMojoProductAdded.size() > 0))
        {
            List<Quote> lstQuote = [Select Tariff_Fee__c from Quote where Id IN : mapTariffFee.KeySet() or Id IN : setQuoteId or ID IN : map_IsMojoProductAdded.keySet()];
            List<Quote> lstUpdatedQuote = new List<Quote>();
            List<Quote> lstUpdatedQuoteNotes = new List<Quote>();
            if(lstQuote != null && lstQuote.size () >0)
            {
                String strNotes =  System.label.MojoProductQuoteNotes;
                for(Quote eachQuote : lstQuote)
                {
                    if(mapTariffFee.containsKey(eachQuote.Id))
                    {
                        System.debug('mapTariffFee.get(eachQuote.Id)------------------->'+mapTariffFee.get(eachQuote.Id));
                        eachQuote.Tariff_Fee__c = mapTariffFee.get(eachQuote.Id);
                        //Akshay:  created field to hold tariff fee for all products. 
                        eachQuote.Tariff_Fee_Background__c = mapTariffFee.get(eachQuote.Id);
                        // add notes to the quote when mojo product is being added.
                        if(String.isNotBlank(strNotes) && ! strNotes.trim().equalsIgnoreCase('null') && map_IsMojoProductAdded != null && map_IsMojoProductAdded.containsKey(eachQuote.Id) && map_IsMojoProductAdded.get(eachQuote.Id) == 0)
                        {
                            eachQuote.Notes_Mojo__c = null;eachQuote.Is_Mojo_Product_Added__c = false;
                        }
                        else if(String.isNotBlank(strNotes) && ! strNotes.trim().equalsIgnoreCase('null') && map_IsMojoProductAdded.containsKey(eachQuote.Id) &&  map_IsMojoProductAdded.get(eachQuote.Id) == 1 && ! eachQuote.Is_Mojo_Product_Added__c)
                        {
                            eachQuote.Notes_Mojo__c = strNotes; eachQuote.Is_Mojo_Product_Added__c = true;  
                        }   
                        lstUpdatedQuote.add(eachQuote);
                    }
                        
                    else {eachQuote.Tariff_Fee__c = null;
                        // add notes to the quote when mojo product is being added.
                        if(String.isNotBlank(strNotes) && ! strNotes.trim().equalsIgnoreCase('null') && map_IsMojoProductAdded != null && map_IsMojoProductAdded.containsKey(eachQuote.Id) && map_IsMojoProductAdded.get(eachQuote.Id) == 0){
                            eachQuote.Notes_Mojo__c = null; eachQuote.Is_Mojo_Product_Added__c = false;}
                        else if(String.isNotBlank(strNotes) && ! strNotes.trim().equalsIgnoreCase('null') && map_IsMojoProductAdded.containsKey(eachQuote.Id) &&  map_IsMojoProductAdded.get(eachQuote.Id) == 1 && ! eachQuote.Is_Mojo_Product_Added__c){
                            eachQuote.Notes_Mojo__c = strNotes;eachQuote.Is_Mojo_Product_Added__c = true;  
                        }lstUpdatedQuote.add(eachQuote);
                    }
                }
            }
            if(lstUpdatedQuote != null && lstUpdatedQuote.size() > 0)
            {
                System.debug('Tariff Fee is updated on Quote successfully!!!!!');
                // bypass Quote trigger.
                clsRecusrsiveCheck.byPassQuoteSyncTrigger = false;
                update lstUpdatedQuote;
                // to run quote line item trigger once, used static variable.
                clsRecusrsiveCheck.runQuoteLineItemOnce = false;
                // bypass Quote trigger.
            }
        }
    }
    }
}